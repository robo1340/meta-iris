// SPDX-License-Identifier: (GPL-2.0-or-later OR BSD-3-Clause)
/*
 * Copyright (C) 2023, STMicroelectronics - All Rights Reserved
 * Author: STM32CubeMX code generation for STMicroelectronics.
 */

/* For more information on Device Tree configuration, please refer to
 * https://wiki.st.com/stm32mpu/wiki/Category:Device_tree_configuration
 */

/dts-v1/;
#include <dt-bindings/pinctrl/stm32-pinfunc.h>

#include "stm32mp135.dtsi"
#include "stm32mp13xf.dtsi"
#include "stm32mp13-pinctrl.dtsi"

/* USER CODE BEGIN includes */
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/leds/common.h>
#include <dt-bindings/regulator/st,stm32mp13-regulator.h>
#include <dt-bindings/rtc/rtc-stm32.h>
/* USER CODE END includes */

/ {
	model = "STMicroelectronics STM32MP135F-DK STM32CubeMX board - openstlinux-6.1-yocto-mickledore-mp1-v23.06.21";
	compatible = "st,stm32mp135f-stm32mp135f-dk_project-mx", "st,stm32mp135f-dk", "st,stm32mp135";

	memory@c0000000 {
		device_type = "memory";
		reg = <0xc0000000 0x20000000>;

		/* USER CODE BEGIN memory */
		/* USER CODE END memory */
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		/* USER CODE BEGIN reserved-memory */

		optee@dd000000{
			reg = <0xdd000000 0x3000000>;
			no-map;
		};
		/* USER CODE END reserved-memory */
	};

	/* USER CODE BEGIN root */

	aliases{
		ethernet0 = &eth1;
		ethernet1 = &eth2;
		serial0 = &uart4;
		serial1 = &usart1;
		serial2 = &uart8;
		serial3 = &usart2;
	};

	chosen{
		stdout-path = "serial0:115200n8";
		#address-cells = <1>;
		#size-cells = <1>;
		ranges;

		framebuffer{
			compatible = "simple-framebuffer";
			clocks = <&rcc LTDC_PX>;
			status = "disabled";
		};
	};

	gpio-keys{
		compatible = "gpio-keys";

		user-pa13{
			label = "User-PA13";
			linux,code = <BTN_1>;
			gpios = <&gpioa 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
		};
	};

	leds{
		compatible = "gpio-leds";

		led-blue{
		    function = LED_FUNCTION_HEARTBEAT;
			color = <LED_COLOR_ID_BLUE>;
			gpios = <&gpioa 14 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "heartbeat";
			default-state = "off";
		};
	};

	panel_backlight:panel-backlight{
		compatible = "gpio-backlight";
		gpios = <&gpioe 12 GPIO_ACTIVE_HIGH>;
		default-on;
		default-brightness-level = <0>;
		status = "okay";
	};

	panel_rgb:panel-rgb{
		compatible = "rocktech,rk043fn48h", "panel-dpi";
		enable-gpios = <&gpioi 7 GPIO_ACTIVE_HIGH>;
		backlight = <&panel_backlight>;
		power-supply = <&scmi_v3v3_sw>;
		data-mapping = "bgr666";
		status = "okay";
		width-mm = <105>;
		height-mm = <67>;

		port{

			panel_in_rgb:endpoint{
				remote-endpoint = <&ltdc_out_rgb>;
			};
		};

		panel-timing{
			clock-frequency = <10000000>;
			hactive = <480>;
			vactive = <272>;
			hsync-len = <52>;
			hfront-porch = <10>;
			hback-porch = <10>;
			vsync-len = <10>;
			vfront-porch = <10>;
			vback-porch = <10>;
			hsync-active = <0>;
			vsync-active = <0>;
			de-active = <1>;
			pixelclk-active = <1>;
		};
	};

	v3v3_ao:v3v3-ao{
		compatible = "regulator-fixed";
		regulator-name = "v3v3_ao";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
		regulator-always-on;
	};

	wake_up{
		compatible = "gpio-keys";
		status = "okay";

		button{
			label = "wake-up";
			linux,code = <KEY_WAKEUP>;
			interrupts-extended = <&optee 0>;
			status = "okay";
		};
	};

	wifi_pwrseq:wifi-pwrseq{
		compatible = "mmc-pwrseq-simple";
		reset-gpios = <&mcp23017 11 GPIO_ACTIVE_LOW>;
	};
	/* USER CODE END root */

	clocks{

		/* USER CODE BEGIN clocks */

		clk_ext_camera:clk-ext-camera{
			#clock-cells = <0>;
			compatible = "fixed-clock";
			clock-frequency = <24000000>;
		};

		clk_mco1:clk-mco1{
			#clock-cells = <0>;
			compatible = "fixed-clock";
			clock-frequency = <24000000>;
		};
		/* USER CODE END clocks */
	};

}; /*root*/

&pinctrl {

	adc1_pins_mx: adc1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 3, ANALOG)>, /* ADC1_INP12 */
					 <STM32_PINMUX('F', 12, ANALOG)>; /* ADC1_INP6 */
		};
	};

	adc1_sleep_pins_mx: adc1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 3, ANALOG)>, /* ADC1_INP12 */
					 <STM32_PINMUX('F', 12, ANALOG)>; /* ADC1_INP6 */
		};
	};

	dcmipp_pins_mx: dcmipp_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 9, AF13)>, /* DCMIPP_D0 */
					 <STM32_PINMUX('B', 7, AF14)>, /* DCMIPP_PIXCLK */
					 <STM32_PINMUX('B', 8, AF13)>, /* DCMIPP_D6 */
					 <STM32_PINMUX('D', 0, AF13)>, /* DCMIPP_D1 */
					 <STM32_PINMUX('D', 3, AF13)>, /* DCMIPP_D5 */
					 <STM32_PINMUX('D', 11, AF14)>, /* DCMIPP_D4 */
					 <STM32_PINMUX('E', 4, AF13)>, /* DCMIPP_D3 */
					 <STM32_PINMUX('E', 14, AF13)>, /* DCMIPP_D7 */
					 <STM32_PINMUX('G', 9, AF13)>, /* DCMIPP_VSYNC */
					 <STM32_PINMUX('G', 10, AF13)>, /* DCMIPP_D2 */
					 <STM32_PINMUX('H', 8, AF13)>; /* DCMIPP_HSYNC */
			bias-disable;
		};
	};

	dcmipp_sleep_pins_mx: dcmipp_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 9, ANALOG)>, /* DCMIPP_D0 */
					 <STM32_PINMUX('B', 7, ANALOG)>, /* DCMIPP_PIXCLK */
					 <STM32_PINMUX('B', 8, ANALOG)>, /* DCMIPP_D6 */
					 <STM32_PINMUX('D', 0, ANALOG)>, /* DCMIPP_D1 */
					 <STM32_PINMUX('D', 3, ANALOG)>, /* DCMIPP_D5 */
					 <STM32_PINMUX('D', 11, ANALOG)>, /* DCMIPP_D4 */
					 <STM32_PINMUX('E', 4, ANALOG)>, /* DCMIPP_D3 */
					 <STM32_PINMUX('E', 14, ANALOG)>, /* DCMIPP_D7 */
					 <STM32_PINMUX('G', 9, ANALOG)>, /* DCMIPP_VSYNC */
					 <STM32_PINMUX('G', 10, ANALOG)>, /* DCMIPP_D2 */
					 <STM32_PINMUX('H', 8, ANALOG)>; /* DCMIPP_HSYNC */
		};
	};

	eth1_pins_mx: eth1_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 1, AF11)>, /* ETH1_REF_CLK */
					 <STM32_PINMUX('A', 2, AF11)>, /* ETH1_MDIO */
					 <STM32_PINMUX('B', 11, AF11)>, /* ETH1_TX_EN */
					 <STM32_PINMUX('G', 2, AF11)>, /* ETH1_MDC */
					 <STM32_PINMUX('G', 13, AF11)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, AF11)>; /* ETH1_TXD1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('C', 1, AF10)>, /* ETH1_CRS_DV */
					 <STM32_PINMUX('C', 4, AF11)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, AF11)>; /* ETH1_RXD1 */
			bias-disable;
		};
	};

	eth1_sleep_pins_mx: eth1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 1, ANALOG)>, /* ETH1_REF_CLK */
					 <STM32_PINMUX('A', 2, ANALOG)>, /* ETH1_MDIO */
					 <STM32_PINMUX('B', 11, ANALOG)>, /* ETH1_TX_EN */
					 <STM32_PINMUX('C', 1, ANALOG)>, /* ETH1_CRS_DV */
					 <STM32_PINMUX('C', 4, ANALOG)>, /* ETH1_RXD0 */
					 <STM32_PINMUX('C', 5, ANALOG)>, /* ETH1_RXD1 */
					 <STM32_PINMUX('G', 2, ANALOG)>, /* ETH1_MDC */
					 <STM32_PINMUX('G', 13, ANALOG)>, /* ETH1_TXD0 */
					 <STM32_PINMUX('G', 14, ANALOG)>; /* ETH1_TXD1 */
		};
	};

	eth2_pins_mx: eth2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('A', 12, AF11)>, /* ETH2_CRS_DV */
					 <STM32_PINMUX('E', 2, AF10)>, /* ETH2_RXD1 */
					 <STM32_PINMUX('F', 4, AF11)>; /* ETH2_RXD0 */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('B', 2, AF11)>, /* ETH2_MDIO */
					 <STM32_PINMUX('F', 6, AF11)>, /* ETH2_TX_EN */
					 <STM32_PINMUX('F', 7, AF11)>, /* ETH2_TXD0 */
					 <STM32_PINMUX('G', 5, AF10)>, /* ETH2_MDC */
					 <STM32_PINMUX('G', 8, AF13)>, /* ETH2_CLK */
					 <STM32_PINMUX('G', 11, AF10)>; /* ETH2_TXD1 */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	eth2_sleep_pins_mx: eth2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 12, ANALOG)>, /* ETH2_CRS_DV */
					 <STM32_PINMUX('B', 2, ANALOG)>, /* ETH2_MDIO */
					 <STM32_PINMUX('E', 2, ANALOG)>, /* ETH2_RXD1 */
					 <STM32_PINMUX('F', 4, ANALOG)>, /* ETH2_RXD0 */
					 <STM32_PINMUX('F', 6, ANALOG)>, /* ETH2_TX_EN */
					 <STM32_PINMUX('F', 7, ANALOG)>, /* ETH2_TXD0 */
					 <STM32_PINMUX('G', 5, ANALOG)>, /* ETH2_MDC */
					 <STM32_PINMUX('G', 8, ANALOG)>, /* ETH2_CLK */
					 <STM32_PINMUX('G', 11, ANALOG)>; /* ETH2_TXD1 */
		};
	};

	i2c1_pins_mx: i2c1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 12, AF5)>, /* I2C1_SCL */
					 <STM32_PINMUX('E', 8, AF5)>; /* I2C1_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c1_sleep_pins_mx: i2c1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 12, ANALOG)>, /* I2C1_SCL */
					 <STM32_PINMUX('E', 8, ANALOG)>; /* I2C1_SDA */
		};
	};

	i2c5_pins_mx: i2c5_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 1, AF4)>, /* I2C5_SCL */
					 <STM32_PINMUX('H', 6, AF4)>; /* I2C5_SDA */
			bias-disable;
			drive-open-drain;
			slew-rate = <0>;
		};
	};

	i2c5_sleep_pins_mx: i2c5_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 1, ANALOG)>, /* I2C5_SCL */
					 <STM32_PINMUX('H', 6, ANALOG)>; /* I2C5_SDA */
		};
	};

	ltdc_pins_mx: ltdc_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 15, AF11)>, /* LTDC_G7 */
					 <STM32_PINMUX('B', 6, AF7)>, /* LTDC_B6 */
					 <STM32_PINMUX('B', 12, AF13)>, /* LTDC_R3 */
					 <STM32_PINMUX('C', 6, AF14)>, /* LTDC_HSYNC */
					 <STM32_PINMUX('C', 7, AF14)>, /* LTDC_G6 */
					 <STM32_PINMUX('D', 5, AF14)>, /* LTDC_G4 */
					 <STM32_PINMUX('D', 9, AF13)>, /* LTDC_CLK */
					 <STM32_PINMUX('D', 10, AF14)>, /* LTDC_B2 */
					 <STM32_PINMUX('D', 14, AF14)>, /* LTDC_R4 */
					 <STM32_PINMUX('E', 0, AF14)>, /* LTDC_B5 */
					 <STM32_PINMUX('E', 7, AF14)>, /* LTDC_R5 */
					 <STM32_PINMUX('E', 9, AF14)>, /* LTDC_R7 */
					 <STM32_PINMUX('E', 13, AF14)>, /* LTDC_R6 */
					 <STM32_PINMUX('F', 1, AF13)>, /* LTDC_B7 */
					 <STM32_PINMUX('F', 2, AF14)>, /* LTDC_B3 */
					 <STM32_PINMUX('F', 3, AF14)>, /* LTDC_G3 */
					 <STM32_PINMUX('G', 0, AF14)>, /* LTDC_G5 */
					 <STM32_PINMUX('G', 4, AF11)>, /* LTDC_VSYNC */
					 <STM32_PINMUX('G', 7, AF14)>, /* LTDC_R2 */
					 <STM32_PINMUX('H', 9, AF11)>, /* LTDC_DE */
					 <STM32_PINMUX('H', 13, AF14)>, /* LTDC_G2 */
					 <STM32_PINMUX('H', 14, AF11)>; /* LTDC_B4 */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	ltdc_sleep_pins_mx: ltdc_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 15, ANALOG)>, /* LTDC_G7 */
					 <STM32_PINMUX('B', 6, ANALOG)>, /* LTDC_B6 */
					 <STM32_PINMUX('B', 12, ANALOG)>, /* LTDC_R3 */
					 <STM32_PINMUX('C', 6, ANALOG)>, /* LTDC_HSYNC */
					 <STM32_PINMUX('C', 7, ANALOG)>, /* LTDC_G6 */
					 <STM32_PINMUX('D', 5, ANALOG)>, /* LTDC_G4 */
					 <STM32_PINMUX('D', 9, ANALOG)>, /* LTDC_CLK */
					 <STM32_PINMUX('D', 10, ANALOG)>, /* LTDC_B2 */
					 <STM32_PINMUX('D', 14, ANALOG)>, /* LTDC_R4 */
					 <STM32_PINMUX('E', 0, ANALOG)>, /* LTDC_B5 */
					 <STM32_PINMUX('E', 7, ANALOG)>, /* LTDC_R5 */
					 <STM32_PINMUX('E', 9, ANALOG)>, /* LTDC_R7 */
					 <STM32_PINMUX('E', 13, ANALOG)>, /* LTDC_R6 */
					 <STM32_PINMUX('F', 1, ANALOG)>, /* LTDC_B7 */
					 <STM32_PINMUX('F', 2, ANALOG)>, /* LTDC_B3 */
					 <STM32_PINMUX('F', 3, ANALOG)>, /* LTDC_G3 */
					 <STM32_PINMUX('G', 0, ANALOG)>, /* LTDC_G5 */
					 <STM32_PINMUX('G', 4, ANALOG)>, /* LTDC_VSYNC */
					 <STM32_PINMUX('G', 7, ANALOG)>, /* LTDC_R2 */
					 <STM32_PINMUX('H', 9, ANALOG)>, /* LTDC_DE */
					 <STM32_PINMUX('H', 13, ANALOG)>, /* LTDC_G2 */
					 <STM32_PINMUX('H', 14, ANALOG)>; /* LTDC_B4 */
		};
	};

	rtc_pins_mx: rtc_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('I', 1, ANALOG)>; /* RTC_OUT2 */
		};
	};

	rtc_sleep_pins_mx: rtc_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('I', 1, ANALOG)>; /* RTC_OUT2 */
		};
	};

	sdmmc1_pins_mx: sdmmc1_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('C', 12, AF12)>, /* SDMMC1_CK */
					 <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	sdmmc1_opendrain_pins_mx: sdmmc1_opendrain_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('C', 8, AF12)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, AF12)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, AF12)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, AF12)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('C', 12, AF12)>; /* SDMMC1_CK */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D', 2, AF12)>; /* SDMMC1_CMD */
			bias-disable;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc1_sleep_pins_mx: sdmmc1_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('C', 8, ANALOG)>, /* SDMMC1_D0 */
					 <STM32_PINMUX('C', 9, ANALOG)>, /* SDMMC1_D1 */
					 <STM32_PINMUX('C', 10, ANALOG)>, /* SDMMC1_D2 */
					 <STM32_PINMUX('C', 11, ANALOG)>, /* SDMMC1_D3 */
					 <STM32_PINMUX('C', 12, ANALOG)>, /* SDMMC1_CK */
					 <STM32_PINMUX('D', 2, ANALOG)>; /* SDMMC1_CMD */
		};
	};

	sdmmc2_pins_mx: sdmmc2_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 3, AF10)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF10)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, AF10)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF10)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('E', 3, AF10)>, /* SDMMC2_CK */
					 <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	sdmmc2_opendrain_pins_mx: sdmmc2_opendrain_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('B', 3, AF10)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, AF10)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, AF10)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, AF10)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('E', 3, AF10)>; /* SDMMC2_CK */
			bias-pull-up;
			drive-push-pull;
			slew-rate = <1>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('G', 6, AF10)>; /* SDMMC2_CMD */
			bias-pull-up;
			drive-open-drain;
			slew-rate = <1>;
		};
	};

	sdmmc2_sleep_pins_mx: sdmmc2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('B', 3, ANALOG)>, /* SDMMC2_D2 */
					 <STM32_PINMUX('B', 4, ANALOG)>, /* SDMMC2_D3 */
					 <STM32_PINMUX('B', 14, ANALOG)>, /* SDMMC2_D0 */
					 <STM32_PINMUX('B', 15, ANALOG)>, /* SDMMC2_D1 */
					 <STM32_PINMUX('E', 3, ANALOG)>, /* SDMMC2_CK */
					 <STM32_PINMUX('G', 6, ANALOG)>; /* SDMMC2_CMD */
		};
	};

	spi5_pins_mx: spi5_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('A', 8, AF5)>, /* SPI5_MISO */
					 <STM32_PINMUX('H', 3, AF5)>, /* SPI5_MOSI */
					 <STM32_PINMUX('H', 7, AF6)>, /* SPI5_SCK */
					 <STM32_PINMUX('H', 11, AF1)>; /* SPI5_NSS */
			bias-disable;
			drive-push-pull;
			slew-rate = <1>;
		};
	};

	spi5_sleep_pins_mx: spi5_sleep_mx-0 { 
		pins {
			pinmux = <STM32_PINMUX('A', 8, ANALOG)>, /* SPI5_MISO */
					 <STM32_PINMUX('H', 3, ANALOG)>, /* SPI5_MOSI */
					 <STM32_PINMUX('H', 7, ANALOG)>, /* SPI5_SCK */
					 <STM32_PINMUX('H', 11, ANALOG)>; /* SPI5_NSS */
		};
	};

	uart4_pins_mx: uart4_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 6, AF8)>; /* UART4_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D', 8, AF8)>; /* UART4_RX */
			bias-disable;
		};
	};

	uart4_sleep_pins_mx: uart4_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 6, ANALOG)>, /* UART4_TX */
					 <STM32_PINMUX('D', 8, ANALOG)>; /* UART4_RX */
		};
	};

	usart2_pins_mx: usart2_mx-0 {
		pins1 {
			pinmux = <STM32_PINMUX('D', 15, AF1)>, /* USART2_RX */
					 <STM32_PINMUX('E', 11, AF2)>; /* USART2_CTS */
			bias-disable;
		};
		pins2 {
			pinmux = <STM32_PINMUX('D', 4, AF3)>, /* USART2_RTS */
					 <STM32_PINMUX('H', 12, AF1)>; /* USART2_TX */
			bias-disable;
			drive-push-pull;
			slew-rate = <0>;
		};
	};

	usart2_sleep_pins_mx: usart2_sleep_mx-0 {
		pins {
			pinmux = <STM32_PINMUX('D', 4, ANALOG)>, /* USART2_RTS */
					 <STM32_PINMUX('D', 15, ANALOG)>, /* USART2_RX */
					 <STM32_PINMUX('E', 11, ANALOG)>, /* USART2_CTS */
					 <STM32_PINMUX('H', 12, ANALOG)>; /* USART2_TX */
		};
	};

	/* USER CODE BEGIN pinctrl */
	/* USER CODE END pinctrl */
};

&adc_1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&adc1_pins_mx>;
	pinctrl-1 = <&adc1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN adc_1 */
	vdda-supply = <&scmi_vdd_adc>;
	vref-supply = <&scmi_vdd_adc>;

	adc1:adc@0{
		status = "okay";

		channel@6{
			reg = <6>;
			st,min-sample-time-ns = <5000>;
		};

		channel@12{
			reg = <12>;
			st,min-sample-time-ns = <5000>;
		};
	};
	/* USER CODE END adc_1 */
};

&bsec{
	status = "okay";

	/* USER CODE BEGIN bsec */
	/* USER CODE END bsec */
};

&crc1{
	status = "okay";

	/* USER CODE BEGIN crc1 */
	/* USER CODE END crc1 */
};

&cryp{
	status = "okay";

	/* USER CODE BEGIN cryp */
	/* USER CODE END cryp */
};

&dcmipp{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&dcmipp_pins_mx>;
	pinctrl-1 = <&dcmipp_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN dcmipp */

	port{

		dcmipp_0:endpoint{
			remote-endpoint = <&mipid02_2>;
			bus-width = <8>;
			hsync-active = <0>;
			vsync-active = <0>;
			pclk-sample = <0>;
			pclk-max-frequency = <120000000>;
		};
	};
	/* USER CODE END dcmipp */
};

&dma1{
	status = "okay";

	/* USER CODE BEGIN dma1 */
	/* USER CODE END dma1 */
};

&dma2{
	status = "okay";

	/* USER CODE BEGIN dma2 */
	/* USER CODE END dma2 */
};

&dmamux1{
	status = "okay";

	dma-masters = <&dma1 &dma2>;
	dma-channels = <16>;

	/* USER CODE BEGIN dmamux1 */
	/* USER CODE END dmamux1 */
};

&dts{
	status = "okay";

	/* USER CODE BEGIN dts */
	/* USER CODE END dts */
};

&eth1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&eth1_pins_mx>;
	pinctrl-1 = <&eth1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN eth1 */
	phy-mode = "rmii";
	max-speed = <100>;
	phy-handle = <&phy0_eth1>;
	nvmem-cells = <&ethernet_mac1_address>;
	nvmem-cell-names = "mac-address";

	mdio1{
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		phy0_eth1:ethernet-phy@0{
			compatible = "ethernet-phy-id0007.c131";
			reset-gpios = <&mcp23017 9 GPIO_ACTIVE_LOW>;
			reg = <0>;
			wakeup-source;
		};
	};
	/* USER CODE END eth1 */
};

&eth2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&eth2_pins_mx>;
	pinctrl-1 = <&eth2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN eth2 */
	phy-mode = "rmii";
	max-speed = <100>;
	phy-handle = <&phy0_eth2>;
	st,ext-phyclk;
	phy-supply = <&scmi_v3v3_sw>;
	nvmem-cells = <&ethernet_mac2_address>;
	nvmem-cell-names = "mac-address";

	mdio1{
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "snps,dwmac-mdio";

		phy0_eth2:ethernet-phy@0{
			compatible = "ethernet-phy-id0007.c131";
			reset-gpios = <&mcp23017 10 GPIO_ACTIVE_LOW>;
			reg = <0>;
		};
	};
	/* USER CODE END eth2 */
};

&i2c1{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c1_pins_mx>;
	pinctrl-1 = <&i2c1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c1 */
	i2c-scl-rising-time-ns = <96>;
	i2c-scl-falling-time-ns = <3>;
	clock-frequency = <1000000>;
	/delete-property/ dmas;
	/delete-property/ dma-names;

	mcp23017:pinctrl@21{
		compatible = "microchip,mcp23017";
		reg = <0x21>;
		gpio-controller;
		#gpio-cells = <2>;
		interrupts = <12 IRQ_TYPE_LEVEL_LOW>;
		interrupt-parent = <&gpiog>;
		pinctrl-names = "default";
		pinctrl-0 = <&mcp23017_pins_a>;
		interrupt-controller;
		#interrupt-cells = <2>;
		microchip,irq-mirror;
	};

	typec@53{
		compatible = "st,stm32g0-typec";
		reg = <0x53>;
		interrupts-extended = <&optee 1>;
		firmware-name = "stm32g0-ucsi.mp135f-dk.fw";
		wakeup-source;

		connector{
			compatible = "usb-c-connector";
			label = "USB-C";

			port{

				con_usb_c_g0_ep:endpoint{
					remote-endpoint = <&usbotg_hs_ep>;
				};
			};
		};
	};
	/* USER CODE END i2c1 */
};

&i2c5{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&i2c5_pins_mx>;
	pinctrl-1 = <&i2c5_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN i2c5 */
	i2c-scl-rising-time-ns = <170>;
	i2c-scl-falling-time-ns = <5>;
	clock-frequency = <400000>;
	/delete-property/ dmas;
	/delete-property/ dma-names;

	stmipi:stmipi@14{
		compatible = "st,st-mipid02";
		reg = <0x14>;
		status = "okay";
		clocks = <&clk_mco1>;
		clock-names = "xclk";
		VDDE-supply = <&scmi_v1v8_periph>;
		VDDIN-supply = <&scmi_v1v8_periph>;
		reset-gpios = <&mcp23017 2 (GPIO_ACTIVE_LOW | GPIO_PUSH_PULL)>;

		ports{
			#address-cells = <1>;
			#size-cells = <0>;

			port@0{
				reg = <0>;

				mipid02_0:endpoint{
					data-lanes = <1 2>;
					lane-polarities = <0 0 0>;
					remote-endpoint = <&gc2145_ep>;
				};
			};

			port@2{
				reg = <2>;

				mipid02_2:endpoint{
					bus-width = <8>;
					hsync-active = <0>;
					vsync-active = <0>;
					pclk-sample = <0>;
					remote-endpoint = <&dcmipp_0>;
				};
			};
		};
	};

	gc2145:gc2145@3c{
		compatible = "galaxycore,gc2145";
		reg = <0x3c>;
		clocks = <&clk_ext_camera>;
		IOVDD-supply = <&scmi_v3v3_sw>;
		AVDD-supply = <&scmi_v3v3_sw>;
		DVDD-supply = <&scmi_v3v3_sw>;
		powerdown-gpios = <&mcp23017 3 (GPIO_ACTIVE_LOW | GPIO_PUSH_PULL)>;
		reset-gpios = <&mcp23017 4 (GPIO_ACTIVE_LOW | GPIO_PUSH_PULL)>;
		status = "okay";

		port{

			gc2145_ep:endpoint{
				remote-endpoint = <&mipid02_0>;
				clock-lanes = <0>;
				data-lanes = <1 2>;
			};
		};
	};

	ov5640:camera@3c{
		compatible = "ovti,ov5640";
		reg = <0x3c>;
		clocks = <&clk_ext_camera>;
		clock-names = "xclk";
		DOVDD-supply = <&scmi_v3v3_sw>;
		status = "disabled";
		powerdown-gpios = <&mcp23017 3 (GPIO_ACTIVE_LOW | GPIO_PUSH_PULL)>;
		reset-gpios = <&mcp23017 4 (GPIO_ACTIVE_LOW | GPIO_PUSH_PULL)>;

		port{

			ov5640_0:endpoint{
				clock-lanes = <0>;
				data-lanes = <1 2>;
			};
		};
	};

	goodix:goodix-ts@5d{
		compatible = "goodix,gt911";
		reg = <0x5d>;
		pinctrl-names = "default";
		pinctrl-0 = <&goodix_pins_a>;
		interrupt-parent = <&gpiof>;
		interrupts = <5 IRQ_TYPE_EDGE_FALLING>;
		reset-gpios = <&gpioh 2 GPIO_ACTIVE_LOW>;
		AVDD28-supply = <&scmi_v3v3_sw>;
		VDDIO-supply = <&scmi_v3v3_sw>;
		touchscreen-size-x = <480>;
		touchscreen-size-y = <272>;
		status = "okay";
	};
	/* USER CODE END i2c5 */
};

&ltdc{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ltdc_pins_mx>;
	pinctrl-1 = <&ltdc_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN ltdc */

	port{

		ltdc_out_rgb:endpoint{
			remote-endpoint = <&panel_in_rgb>;
		};
	};
	/* USER CODE END ltdc */
};

&mdma{
	status = "okay";

	/* USER CODE BEGIN mdma */
	/* USER CODE END mdma */
};

&rcc{
	status = "okay";

	/* USER CODE BEGIN rcc */
	/* USER CODE END rcc */
};

&rtc{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&rtc_pins_mx>;
	pinctrl-1 = <&rtc_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN rtc */
	st,lsco = <RTC_OUT2_RMP>;
	/* USER CODE END rtc */
};

&sdmmc1{
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc1_pins_mx>;
	pinctrl-1 = <&sdmmc1_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc1_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc1 */
	cd-gpios = <&gpioh 4 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
	disable-wp;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&scmi_vdd_sd>;
	/* USER CODE END sdmmc1 */
};

&sdmmc2{
	pinctrl-names = "default", "opendrain", "sleep";
	pinctrl-0 = <&sdmmc2_pins_mx>;
	pinctrl-1 = <&sdmmc2_opendrain_pins_mx>;
	pinctrl-2 = <&sdmmc2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN sdmmc2 */
	non-removable;
	st,neg-edge;
	bus-width = <4>;
	vmmc-supply = <&v3v3_ao>;
	mmc-pwrseq = <&wifi_pwrseq>;
	#address-cells = <1>;
	#size-cells = <0>;

	brcmf:bcrmf@1{
		reg = <1>;
		compatible = "brcm,bcm4329-fmac";
		interrupt-parent = <&gpiof>;
		interrupts = <0 IRQ_TYPE_LEVEL_HIGH>; /* WL_HOST_WAKE */
		interrupt-names = "host-wake";
	};
	/* USER CODE END sdmmc2 */
};


&spi5 {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&spi5_pins_a>;
	pinctrl-1 = <&spi5_sleep_pins_a>;
	status = "okay";
	cs-gpios= <&gpioh 11 0>;

	master@0 {
		compatible = "rohm,dh2228fv";
		reg = <0>;
		spi-max-frequency = <10000000>;
	};
};


//&spi5{
//	pinctrl-names = "default";
//	//pinctrl-names = "default", "sleep";
//	//pinctrl-0 = <&spi5_pins_a>;
//	//pinctrl-1 = <&spi5_sleep_pins_a>;
//	pinctrl-0 = <&spi5_pins_mx>;
//	//pinctrl-1 = <&spi5_sleep_pins_mx>;
//	status = "okay";
//      cs-gpios=<&gpioh 11 0>;
//
//	// USER CODE BEGIN spi5
//	//spidev: spidev@0 {
//	master@0 {
//		compatible = "rohm,dh2228fv";
//              //#address-cells = <1>;
//		//#size-cells = <1>;
//		reg = <0>;
//		spi-max-frequency = <10000000>;
// 	        st,spi-midi-ns = <4000>;	
//              //status = "okay";	
//        };
//	// USER CODE END spi5 
//};

&uart4{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&uart4_pins_mx>;
	pinctrl-1 = <&uart4_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN uart4 */
	/delete-property/ dmas;
	/delete-property/ dma-names;
	/* USER CODE END uart4 */
};

&usart2{
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&usart2_pins_mx>;
	pinctrl-1 = <&usart2_sleep_pins_mx>;
	status = "okay";

	/* USER CODE BEGIN usart2 */
	uart-has-rtscts;

	bluetooth{
		shutdown-gpios = <&mcp23017 13 GPIO_ACTIVE_HIGH>;
		compatible = "brcm,bcm43438-bt";
		max-speed = <3000000>;
		vbat-supply = <&v3v3_ao>;
		vddio-supply = <&v3v3_ao>;
	};
	/* USER CODE END usart2 */
};

&usbh_ehci{
	status = "okay";

	/* USER CODE BEGIN usbh_ehci */
	phys = <&usbphyc_port0>;
	#address-cells = <1>;
	#size-cells = <0>;

	hub@1{
		compatible = "usb424,2514";
		reg = <1>;
		vdd-supply = <&scmi_v3v3_sw>;
	};
	/* USER CODE END usbh_ehci */
};

&usbh_ohci{
	status = "okay";

	/* USER CODE BEGIN usbh_ohci */
	/* USER CODE END usbh_ohci */
};

&usbotg_hs{
	status = "okay";

	/* USER CODE BEGIN usbotg_hs */
	phys = <&usbphyc_port1 0>;
	phy-names = "usb2-phy";
	usb-role-switch;

	port{

		usbotg_hs_ep:endpoint{
			remote-endpoint = <&con_usb_c_g0_ep>;
		};
	};
	/* USER CODE END usbotg_hs */
};

&usbphyc{
	status = "okay";

	/* USER CODE BEGIN usbphyc */
	/* USER CODE END usbphyc */
};

&usbphyc_port0{
	status = "okay";

	/* USER CODE BEGIN usbphyc_port0 */
	phy-supply = <&scmi_vdd_usb>;
	st,current-boost-microamp = <1000>;
	st,decrease-hs-slew-rate;
	st,tune-hs-dc-level = <2>;
	st,enable-hs-rftime-reduction;
	st,trim-hs-current = <11>;
	st,trim-hs-impedance = <2>;
	st,tune-squelch-level = <1>;
	st,enable-hs-rx-gain-eq;
	st,no-hs-ftime-ctrl;
	st,no-lsfs-sc;
	/* USER CODE END usbphyc_port0 */
};

&usbphyc_port1{
	status = "okay";

	/* USER CODE BEGIN usbphyc_port1 */
	phy-supply = <&scmi_vdd_usb>;
	st,current-boost-microamp = <1000>;
	st,decrease-hs-slew-rate;
	st,tune-hs-dc-level = <2>;
	st,enable-hs-rftime-reduction;
	st,trim-hs-current = <11>;
	st,trim-hs-impedance = <2>;
	st,tune-squelch-level = <1>;
	st,enable-hs-rx-gain-eq;
	st,no-hs-ftime-ctrl;
	st,no-lsfs-sc;
	/* USER CODE END usbphyc_port1 */
};

/* USER CODE BEGIN addons */

&arm_wdt{
	timeout-sec = <32>;
	status = "okay";
};

&scmi_regu{

	scmi_vddcpu:voltd-vddcpu{
		reg = <VOLTD_SCMI_STPMIC1_BUCK1>;
		regulator-name = "vddcpu";
	};

	scmi_vdd:voltd-vdd{
		reg = <VOLTD_SCMI_STPMIC1_BUCK3>;
		regulator-name = "vdd";
	};

	scmi_vddcore:voltd-vddcore{
		reg = <VOLTD_SCMI_STPMIC1_BUCK4>;
		regulator-name = "vddcore";
	};

	scmi_vdd_adc:voltd-vdd-adc{
		reg = <VOLTD_SCMI_STPMIC1_LDO1>;
		regulator-name = "vdd_adc";
	};

	scmi_vdd_usb:voltd-vdd-usb{
		reg = <VOLTD_SCMI_STPMIC1_LDO4>;
		regulator-name = "vdd_usb";
	};

	scmi_vdd_sd:voltd-vdd-sd{
		reg = <VOLTD_SCMI_STPMIC1_LDO5>;
		regulator-name = "vdd_sd";
	};

	scmi_v1v8_periph:voltd-v1v8-periph{
		reg = <VOLTD_SCMI_STPMIC1_LDO6>;
		regulator-name = "v1v8_periph";
	};

	scmi_v3v3_sw:voltd-v3v3-sw{
		reg = <VOLTD_SCMI_STPMIC1_PWR_SW2>;
		regulator-name = "v3v3_sw";
	};
};

&pinctrl{
	mcp23017_pins_a: mcp23017-0 {
		pins {
			pinmux = <STM32_PINMUX('G', 12, GPIO)>;
			bias-pull-up;
		};
	};

	stm32g0_intn_pins_a: stm32g0-intn-0 {
		pins {
			pinmux = <STM32_PINMUX('I', 2, GPIO)>;
			bias-pull-up;
		};
	};

	goodix_pins_a: goodix-0 {
		pins {
			pinmux = <STM32_PINMUX('F', 5, GPIO)>;
			bias-pull-down;
		};
	};
};
/* USER CODE END addons */

